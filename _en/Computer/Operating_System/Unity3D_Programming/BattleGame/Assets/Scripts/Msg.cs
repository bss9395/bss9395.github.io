// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SAnBiIigKB1N5bmNQaWQSCwoDUGlkGAEgASgFEhAKCFVz",
            "ZXJuYW1lGAIgASgJIkAKBlBsYXllchILCgNQaWQYASABKAUSFwoBUBgCIAEo",
            "CzIMLnBiLlBvc2l0aW9uEhAKCFVzZXJuYW1lGAMgASgJIiUKC1N5bmNQbGF5",
            "ZXJzEhYKAnBzGAEgAygLMgoucGIuUGxheWVyIkoKCFBvc2l0aW9uEgkKAVgY",
            "ASABKAISCQoBWRgCIAEoAhIJCgFaGAMgASgCEgkKAVYYBCABKAISEgoKQmxv",
            "b2RWYWx1ZRgFIAEoBSIrCghWZWxvY2l0eRIJCgFYGAEgASgCEgkKAVkYAiAB",
            "KAISCQoBWhgDIAEoAiKCAQoJQnJvYWRDYXN0EgsKA1BpZBgBIAEoBRIKCgJU",
            "cBgCIAEoBRIRCgdDb250ZW50GAMgASgJSAASGQoBUBgEIAEoCzIMLnBiLlBv",
            "c2l0aW9uSAASFAoKQWN0aW9uRGF0YRgFIAEoBUgAEhAKCFVzZXJuYW1lGAYg",
            "ASgJQgYKBERhdGEiFwoEVGFsaxIPCgdDb250ZW50GAEgASgJInAKDFNraWxs",
            "VHJpZ2dlchILCgNQaWQYASABKAUSDwoHU2tpbGxJZBgCIAEoBRIXCgFQGAMg",
            "ASgLMgwucGIuUG9zaXRpb24SFwoBVhgEIAEoCzIMLnBiLlZlbG9jaXR5EhAK",
            "CEJ1bGxldElkGAUgASgFInYKDFNraWxsQ29udGFjdBIOCgZTcmNQaWQYASAB",
            "KAUSEQoJVGFyZ2V0UGlkGAIgASgFEg8KB1NraWxsSWQYAyABKAUSEAoIQnVs",
            "bGV0SWQYBCABKAUSIAoKQ29udGFjdFBvcxgFIAEoCzIMLnBiLlBvc2l0aW9u",
            "IkIKEkNoYW5nZVdvcmxkUmVxdWVzdBILCgNQaWQYASABKAUSDQoFU3JjSWQY",
            "AiABKAUSEAoIVGFyZ2V0SWQYAyABKAUibwoTQ2hhbmdlV29ybGRSZXNwb25z",
            "ZRILCgNQaWQYASABKAUSEQoJQ2hhbmdlUmVzGAIgASgFEg0KBVNyY0lkGAMg",
            "ASgFEhAKCFRhcmdldElkGAQgASgFEhcKAVAYBSABKAsyDC5wYi5Qb3NpdGlv",
            "bkIFqgICUGJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SyncPid), global::Pb.SyncPid.Parser, new[]{ "Pid", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Player), global::Pb.Player.Parser, new[]{ "Pid", "P", "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SyncPlayers), global::Pb.SyncPlayers.Parser, new[]{ "Ps" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Position), global::Pb.Position.Parser, new[]{ "X", "Y", "Z", "V", "BloodValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Velocity), global::Pb.Velocity.Parser, new[]{ "X", "Y", "Z" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.BroadCast), global::Pb.BroadCast.Parser, new[]{ "Pid", "Tp", "Content", "P", "ActionData", "Username" }, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Talk), global::Pb.Talk.Parser, new[]{ "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SkillTrigger), global::Pb.SkillTrigger.Parser, new[]{ "Pid", "SkillId", "P", "V", "BulletId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.SkillContact), global::Pb.SkillContact.Parser, new[]{ "SrcPid", "TargetPid", "SkillId", "BulletId", "ContactPos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ChangeWorldRequest), global::Pb.ChangeWorldRequest.Parser, new[]{ "Pid", "SrcId", "TargetId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.ChangeWorldResponse), global::Pb.ChangeWorldResponse.Parser, new[]{ "Pid", "ChangeRes", "SrcId", "TargetId", "P" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SyncPid : pb::IMessage<SyncPid> {
    private static readonly pb::MessageParser<SyncPid> _parser = new pb::MessageParser<SyncPid>(() => new SyncPid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncPid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPid(SyncPid other) : this() {
      pid_ = other.pid_;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPid Clone() {
      return new SyncPid(this);
    }

    /// <summary>Field number for the "Pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncPid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncPid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncPid other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      pid_ = other.pid_;
      p_ = other.p_ != null ? other.p_.Clone() : null;
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "Pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 2;
    private global::Pb.Position p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Position P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 3;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(P, other.P)) return false;
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (p_ != null) hash ^= P.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (p_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(P);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (p_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.p_ != null) {
        if (p_ == null) {
          P = new global::Pb.Position();
        }
        P.MergeFrom(other.P);
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (p_ == null) {
              P = new global::Pb.Position();
            }
            input.ReadMessage(P);
            break;
          }
          case 26: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncPlayers : pb::IMessage<SyncPlayers> {
    private static readonly pb::MessageParser<SyncPlayers> _parser = new pb::MessageParser<SyncPlayers>(() => new SyncPlayers());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncPlayers> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPlayers() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPlayers(SyncPlayers other) : this() {
      ps_ = other.ps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncPlayers Clone() {
      return new SyncPlayers(this);
    }

    /// <summary>Field number for the "ps" field.</summary>
    public const int PsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Pb.Player> _repeated_ps_codec
        = pb::FieldCodec.ForMessage(10, global::Pb.Player.Parser);
    private readonly pbc::RepeatedField<global::Pb.Player> ps_ = new pbc::RepeatedField<global::Pb.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Pb.Player> Ps {
      get { return ps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncPlayers);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncPlayers other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!ps_.Equals(other.ps_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ps_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ps_.WriteTo(output, _repeated_ps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ps_.CalculateSize(_repeated_ps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncPlayers other) {
      if (other == null) {
        return;
      }
      ps_.Add(other.ps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ps_.AddEntriesFrom(input, _repeated_ps_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Position : pb::IMessage<Position> {
    private static readonly pb::MessageParser<Position> _parser = new pb::MessageParser<Position>(() => new Position());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Position> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position(Position other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      v_ = other.v_;
      bloodValue_ = other.bloodValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Position Clone() {
      return new Position(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "V" field.</summary>
    public const int VFieldNumber = 4;
    private float v_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "BloodValue" field.</summary>
    public const int BloodValueFieldNumber = 5;
    private int bloodValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BloodValue {
      get { return bloodValue_; }
      set {
        bloodValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Position);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Position other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(V, other.V)) return false;
      if (BloodValue != other.BloodValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (V != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(V);
      if (BloodValue != 0) hash ^= BloodValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (V != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(V);
      }
      if (BloodValue != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BloodValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (V != 0F) {
        size += 1 + 4;
      }
      if (BloodValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Position other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.V != 0F) {
        V = other.V;
      }
      if (other.BloodValue != 0) {
        BloodValue = other.BloodValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            V = input.ReadFloat();
            break;
          }
          case 40: {
            BloodValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///速度向量
  /// </summary>
  public sealed partial class Velocity : pb::IMessage<Velocity> {
    private static readonly pb::MessageParser<Velocity> _parser = new pb::MessageParser<Velocity>(() => new Velocity());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Velocity> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity(Velocity other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Velocity Clone() {
      return new Velocity(this);
    }

    /// <summary>Field number for the "X" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "Y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "Z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Velocity);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Velocity other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Velocity other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BroadCast : pb::IMessage<BroadCast> {
    private static readonly pb::MessageParser<BroadCast> _parser = new pb::MessageParser<BroadCast>(() => new BroadCast());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BroadCast> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCast() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCast(BroadCast other) : this() {
      pid_ = other.pid_;
      tp_ = other.tp_;
      username_ = other.username_;
      switch (other.DataCase) {
        case DataOneofCase.Content:
          Content = other.Content;
          break;
        case DataOneofCase.P:
          P = other.P.Clone();
          break;
        case DataOneofCase.ActionData:
          ActionData = other.ActionData;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BroadCast Clone() {
      return new BroadCast(this);
    }

    /// <summary>Field number for the "Pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "Tp" field.</summary>
    public const int TpFieldNumber = 2;
    private int tp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tp {
      get { return tp_; }
      set {
        tp_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return dataCase_ == DataOneofCase.Content ? (string) data_ : ""; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        dataCase_ = DataOneofCase.Content;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Position P {
      get { return dataCase_ == DataOneofCase.P ? (global::Pb.Position) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.P;
      }
    }

    /// <summary>Field number for the "ActionData" field.</summary>
    public const int ActionDataFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionData {
      get { return dataCase_ == DataOneofCase.ActionData ? (int) data_ : 0; }
      set {
        data_ = value;
        dataCase_ = DataOneofCase.ActionData;
      }
    }

    /// <summary>Field number for the "Username" field.</summary>
    public const int UsernameFieldNumber = 6;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "Data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Content = 3,
      P = 4,
      ActionData = 5,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BroadCast);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BroadCast other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (Tp != other.Tp) return false;
      if (Content != other.Content) return false;
      if (!object.Equals(P, other.P)) return false;
      if (ActionData != other.ActionData) return false;
      if (Username != other.Username) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (Tp != 0) hash ^= Tp.GetHashCode();
      if (dataCase_ == DataOneofCase.Content) hash ^= Content.GetHashCode();
      if (dataCase_ == DataOneofCase.P) hash ^= P.GetHashCode();
      if (dataCase_ == DataOneofCase.ActionData) hash ^= ActionData.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (Tp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tp);
      }
      if (dataCase_ == DataOneofCase.Content) {
        output.WriteRawTag(26);
        output.WriteString(Content);
      }
      if (dataCase_ == DataOneofCase.P) {
        output.WriteRawTag(34);
        output.WriteMessage(P);
      }
      if (dataCase_ == DataOneofCase.ActionData) {
        output.WriteRawTag(40);
        output.WriteInt32(ActionData);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (Tp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tp);
      }
      if (dataCase_ == DataOneofCase.Content) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (dataCase_ == DataOneofCase.P) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
      }
      if (dataCase_ == DataOneofCase.ActionData) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionData);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BroadCast other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.Tp != 0) {
        Tp = other.Tp;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      switch (other.DataCase) {
        case DataOneofCase.Content:
          Content = other.Content;
          break;
        case DataOneofCase.P:
          if (P == null) {
            P = new global::Pb.Position();
          }
          P.MergeFrom(other.P);
          break;
        case DataOneofCase.ActionData:
          ActionData = other.ActionData;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            Tp = input.ReadInt32();
            break;
          }
          case 26: {
            Content = input.ReadString();
            break;
          }
          case 34: {
            global::Pb.Position subBuilder = new global::Pb.Position();
            if (dataCase_ == DataOneofCase.P) {
              subBuilder.MergeFrom(P);
            }
            input.ReadMessage(subBuilder);
            P = subBuilder;
            break;
          }
          case 40: {
            ActionData = input.ReadInt32();
            break;
          }
          case 50: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Talk : pb::IMessage<Talk> {
    private static readonly pb::MessageParser<Talk> _parser = new pb::MessageParser<Talk>(() => new Talk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Talk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Talk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Talk(Talk other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Talk Clone() {
      return new Talk(this);
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Talk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Talk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Talk other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///释放技能
  /// </summary>
  public sealed partial class SkillTrigger : pb::IMessage<SkillTrigger> {
    private static readonly pb::MessageParser<SkillTrigger> _parser = new pb::MessageParser<SkillTrigger>(() => new SkillTrigger());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillTrigger> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillTrigger() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillTrigger(SkillTrigger other) : this() {
      pid_ = other.pid_;
      skillId_ = other.skillId_;
      p_ = other.p_ != null ? other.p_.Clone() : null;
      v_ = other.v_ != null ? other.v_.Clone() : null;
      bulletId_ = other.bulletId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillTrigger Clone() {
      return new SkillTrigger(this);
    }

    /// <summary>Field number for the "Pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 2;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 3;
    private global::Pb.Position p_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Position P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    /// <summary>Field number for the "V" field.</summary>
    public const int VFieldNumber = 4;
    private global::Pb.Velocity v_;
    /// <summary>
    ///子弹速度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Velocity V {
      get { return v_; }
      set {
        v_ = value;
      }
    }

    /// <summary>Field number for the "BulletId" field.</summary>
    public const int BulletIdFieldNumber = 5;
    private int bulletId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillTrigger);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillTrigger other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (SkillId != other.SkillId) return false;
      if (!object.Equals(P, other.P)) return false;
      if (!object.Equals(V, other.V)) return false;
      if (BulletId != other.BulletId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (p_ != null) hash ^= P.GetHashCode();
      if (v_ != null) hash ^= V.GetHashCode();
      if (BulletId != 0) hash ^= BulletId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SkillId);
      }
      if (p_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(P);
      }
      if (v_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(V);
      }
      if (BulletId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BulletId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (p_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
      }
      if (v_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(V);
      }
      if (BulletId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillTrigger other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.p_ != null) {
        if (p_ == null) {
          P = new global::Pb.Position();
        }
        P.MergeFrom(other.P);
      }
      if (other.v_ != null) {
        if (v_ == null) {
          V = new global::Pb.Velocity();
        }
        V.MergeFrom(other.V);
      }
      if (other.BulletId != 0) {
        BulletId = other.BulletId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            SkillId = input.ReadInt32();
            break;
          }
          case 26: {
            if (p_ == null) {
              P = new global::Pb.Position();
            }
            input.ReadMessage(P);
            break;
          }
          case 34: {
            if (v_ == null) {
              V = new global::Pb.Velocity();
            }
            input.ReadMessage(V);
            break;
          }
          case 40: {
            BulletId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///技能的碰撞
  /// </summary>
  public sealed partial class SkillContact : pb::IMessage<SkillContact> {
    private static readonly pb::MessageParser<SkillContact> _parser = new pb::MessageParser<SkillContact>(() => new SkillContact());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SkillContact> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillContact() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillContact(SkillContact other) : this() {
      srcPid_ = other.srcPid_;
      targetPid_ = other.targetPid_;
      skillId_ = other.skillId_;
      bulletId_ = other.bulletId_;
      contactPos_ = other.contactPos_ != null ? other.contactPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SkillContact Clone() {
      return new SkillContact(this);
    }

    /// <summary>Field number for the "SrcPid" field.</summary>
    public const int SrcPidFieldNumber = 1;
    private int srcPid_;
    /// <summary>
    ///攻击者ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcPid {
      get { return srcPid_; }
      set {
        srcPid_ = value;
      }
    }

    /// <summary>Field number for the "TargetPid" field.</summary>
    public const int TargetPidFieldNumber = 2;
    private int targetPid_;
    /// <summary>
    ///被攻击者
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetPid {
      get { return targetPid_; }
      set {
        targetPid_ = value;
      }
    }

    /// <summary>Field number for the "SkillId" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "BulletId" field.</summary>
    public const int BulletIdFieldNumber = 4;
    private int bulletId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletId {
      get { return bulletId_; }
      set {
        bulletId_ = value;
      }
    }

    /// <summary>Field number for the "ContactPos" field.</summary>
    public const int ContactPosFieldNumber = 5;
    private global::Pb.Position contactPos_;
    /// <summary>
    ///攻击坐标
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Position ContactPos {
      get { return contactPos_; }
      set {
        contactPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SkillContact);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SkillContact other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SrcPid != other.SrcPid) return false;
      if (TargetPid != other.TargetPid) return false;
      if (SkillId != other.SkillId) return false;
      if (BulletId != other.BulletId) return false;
      if (!object.Equals(ContactPos, other.ContactPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SrcPid != 0) hash ^= SrcPid.GetHashCode();
      if (TargetPid != 0) hash ^= TargetPid.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (BulletId != 0) hash ^= BulletId.GetHashCode();
      if (contactPos_ != null) hash ^= ContactPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SrcPid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SrcPid);
      }
      if (TargetPid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetPid);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (BulletId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BulletId);
      }
      if (contactPos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ContactPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SrcPid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcPid);
      }
      if (TargetPid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetPid);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (BulletId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletId);
      }
      if (contactPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContactPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SkillContact other) {
      if (other == null) {
        return;
      }
      if (other.SrcPid != 0) {
        SrcPid = other.SrcPid;
      }
      if (other.TargetPid != 0) {
        TargetPid = other.TargetPid;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.BulletId != 0) {
        BulletId = other.BulletId;
      }
      if (other.contactPos_ != null) {
        if (contactPos_ == null) {
          ContactPos = new global::Pb.Position();
        }
        ContactPos.MergeFrom(other.ContactPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SrcPid = input.ReadInt32();
            break;
          }
          case 16: {
            TargetPid = input.ReadInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 32: {
            BulletId = input.ReadInt32();
            break;
          }
          case 42: {
            if (contactPos_ == null) {
              ContactPos = new global::Pb.Position();
            }
            input.ReadMessage(ContactPos);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeWorldRequest : pb::IMessage<ChangeWorldRequest> {
    private static readonly pb::MessageParser<ChangeWorldRequest> _parser = new pb::MessageParser<ChangeWorldRequest>(() => new ChangeWorldRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeWorldRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWorldRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWorldRequest(ChangeWorldRequest other) : this() {
      pid_ = other.pid_;
      srcId_ = other.srcId_;
      targetId_ = other.targetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWorldRequest Clone() {
      return new ChangeWorldRequest(this);
    }

    /// <summary>Field number for the "Pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "SrcId" field.</summary>
    public const int SrcIdFieldNumber = 2;
    private int srcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcId {
      get { return srcId_; }
      set {
        srcId_ = value;
      }
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 3;
    private int targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeWorldRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeWorldRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (SrcId != other.SrcId) return false;
      if (TargetId != other.TargetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (SrcId != 0) hash ^= SrcId.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (SrcId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SrcId);
      }
      if (TargetId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (SrcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcId);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeWorldRequest other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.SrcId != 0) {
        SrcId = other.SrcId;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            SrcId = input.ReadInt32();
            break;
          }
          case 24: {
            TargetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeWorldResponse : pb::IMessage<ChangeWorldResponse> {
    private static readonly pb::MessageParser<ChangeWorldResponse> _parser = new pb::MessageParser<ChangeWorldResponse>(() => new ChangeWorldResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeWorldResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWorldResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWorldResponse(ChangeWorldResponse other) : this() {
      pid_ = other.pid_;
      changeRes_ = other.changeRes_;
      srcId_ = other.srcId_;
      targetId_ = other.targetId_;
      p_ = other.p_ != null ? other.p_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeWorldResponse Clone() {
      return new ChangeWorldResponse(this);
    }

    /// <summary>Field number for the "Pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "ChangeRes" field.</summary>
    public const int ChangeResFieldNumber = 2;
    private int changeRes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChangeRes {
      get { return changeRes_; }
      set {
        changeRes_ = value;
      }
    }

    /// <summary>Field number for the "SrcId" field.</summary>
    public const int SrcIdFieldNumber = 3;
    private int srcId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SrcId {
      get { return srcId_; }
      set {
        srcId_ = value;
      }
    }

    /// <summary>Field number for the "TargetId" field.</summary>
    public const int TargetIdFieldNumber = 4;
    private int targetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "P" field.</summary>
    public const int PFieldNumber = 5;
    private global::Pb.Position p_;
    /// <summary>
    ///切换场景后的出生点
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Position P {
      get { return p_; }
      set {
        p_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeWorldResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeWorldResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (ChangeRes != other.ChangeRes) return false;
      if (SrcId != other.SrcId) return false;
      if (TargetId != other.TargetId) return false;
      if (!object.Equals(P, other.P)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (ChangeRes != 0) hash ^= ChangeRes.GetHashCode();
      if (SrcId != 0) hash ^= SrcId.GetHashCode();
      if (TargetId != 0) hash ^= TargetId.GetHashCode();
      if (p_ != null) hash ^= P.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (ChangeRes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChangeRes);
      }
      if (SrcId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SrcId);
      }
      if (TargetId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TargetId);
      }
      if (p_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(P);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (ChangeRes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChangeRes);
      }
      if (SrcId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SrcId);
      }
      if (TargetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetId);
      }
      if (p_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeWorldResponse other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.ChangeRes != 0) {
        ChangeRes = other.ChangeRes;
      }
      if (other.SrcId != 0) {
        SrcId = other.SrcId;
      }
      if (other.TargetId != 0) {
        TargetId = other.TargetId;
      }
      if (other.p_ != null) {
        if (p_ == null) {
          P = new global::Pb.Position();
        }
        P.MergeFrom(other.P);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 16: {
            ChangeRes = input.ReadInt32();
            break;
          }
          case 24: {
            SrcId = input.ReadInt32();
            break;
          }
          case 32: {
            TargetId = input.ReadInt32();
            break;
          }
          case 42: {
            if (p_ == null) {
              P = new global::Pb.Position();
            }
            input.ReadMessage(P);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
